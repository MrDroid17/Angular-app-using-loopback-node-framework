{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/dashboard/dashboard.module.ts","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.scss","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/sign-up/sign-up.component.html","webpack:///./src/app/components/sign-up/sign-up.component.scss","webpack:///./src/app/components/sign-up/sign-up.component.ts","webpack:///./src/app/guard/auth.guard.ts","webpack:///./src/app/services/auth.service.ts","webpack:///./src/app/services/category.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<router-outlet></router-outlet>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'client';\n}\n","// tslint:disable:max-line-length\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HttpModule } from '@angular/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport {\n  MatToolbarModule, MatButtonModule, MatInputModule, MatFormFieldModule, MatSidenavModule,\n  MatIconModule, MatListModule, MatCardModule, MatMenuModule, MatSelectModule, MatSnackBarModule, MatOptionModule, MatCheckboxModule, MatTooltipModule, MatDialogModule } from '@angular/material';\n\n/**\n * component and services and modules\n */\nimport { LoginComponent } from './components/login/login.component';\nimport { SignUpComponent } from './components/sign-up/sign-up.component';\nimport { AuthService } from './services/auth.service';\nimport { CategoryService } from './services/category.service';\nimport { DashboardModule} from './components/dashboard/dashboard.module';\nimport { AuthGuard } from './guard/auth.guard';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'sign-up', component: SignUpComponent }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    SignUpComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpModule,\n    RouterModule.forRoot(routes, { useHash: false }),\n    BrowserAnimationsModule,\n    LayoutModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatCardModule,\n    MatMenuModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatSnackBarModule,\n    MatOptionModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatListModule,\n    MatTooltipModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    DashboardModule\n  ],\n  providers: [\n    AuthService,\n    CategoryService,\n    AuthGuard\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class DashboardModule { }\n","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"login-form mat-elevation-z4\\\" [formGroup]=\\\"authService.loginForm\\\">\\n    <h2 class=\\\"mat-h2\\\">Login</h2>\\n    <mat-form-field class=\\\"field-width\\\">\\n      <input matInput type=\\\"email\\\" placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required>\\n      <mat-error *ngIf=\\\"authService.loginForm.controls['email'].errors?.required\\\">Email is mandatory.</mat-error>\\n      <mat-error *ngIf=\\\"authService.loginForm.controls['email'].errors?.pattern\\\">invalid email.</mat-error>\\n    </mat-form-field>\\n    <mat-form-field class=\\\"field-width\\\">\\n      <input matInput type=\\\"password\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\" required matInput>\\n      <mat-error>Password is mandatory</mat-error>\\n    </mat-form-field>\\n    <button mat-raised-button class=\\\"field-width\\\" color=\\\"primary\\\" type=\\\"submit\\\"\\n      (click)=\\\"loginUser(authService.loginForm.value)\\\" [disabled]=\\\"authService.loginForm.invalid\\\">Login</button>\\n    <!-- <mat-checkbox class=\\\"remember-me\\\" [(ngModel)]=\\\"checked\\\">Remember me</mat-checkbox> -->\\n    <div class=\\\"link\\\">\\n      <a href=\\\"/sign-up\\\">Sign up</a>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \".container {\\n  margin: 0 auto;\\n  margin-top: 75px; }\\n\\n.login-form {\\n  margin: 0 auto;\\n  width: 20%;\\n  padding: 20px; }\\n\\n.login-form h2, .login-form h5, .login-form .link {\\n    text-align: center; }\\n\\n.login-form a:link {\\n    font-size: 14px; }\\n\\n.login-form .field-width {\\n    width: 100%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RhZG55YTIvcHJvamVjdERldmVsb3BtZW50L1dlYi9XZWJTU1AvRnJvbnRlbmQtVGVzdC1Qcm9qZWN0L2FuZ3VsYXItc3JjL3NyYy9hcHAvY29tcG9uZW50cy9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGVBQWM7RUFDZCxpQkFBZ0IsRUFDakI7O0FBQ0Q7RUFDRSxlQUFjO0VBQ2QsV0FBVTtFQUNWLGNBQWEsRUFVZDs7QUFiRDtJQUtJLG1CQUFrQixFQUNuQjs7QUFOSDtJQVFJLGdCQUFlLEVBQ2hCOztBQVRIO0lBV0ksWUFBVyxFQUNaIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXIge1xuICBtYXJnaW46IDAgYXV0bztcbiAgbWFyZ2luLXRvcDogNzVweDtcbn1cbi5sb2dpbi1mb3JtIHtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHdpZHRoOiAyMCU7XG4gIHBhZGRpbmc6IDIwcHg7XG4gICYgaDIsaDUsIC5saW5rIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIH1cbiAgJiBhOmxpbmt7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICB9XG4gICYgLmZpZWxkLXdpZHRoe1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG59XG5cbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor(\n    private router: Router,\n    public authService: AuthService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  loginUser(user) {\n    this.authService.userLogin(user).subscribe(res => {\n      if (res['id']) {\n        this.router.navigate(['login']);\n      } else {\n\n      }\n\n    });\n  }\n\n}\n","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"sign-up-form mat-elevation-z4\\\" [formGroup]=\\\"authService.signupForm\\\">\\n    <h2 class=\\\"mat-h2\\\">Sign up</h2>\\n    <mat-form-field class=\\\"field-width\\\">\\n      <input matInput type=\\\"text\\\" placeholder=\\\"Username\\\" formControlName=\\\"username\\\" required>\\n      <mat-error>Username is mandatory</mat-error>\\n    </mat-form-field>\\n    <mat-form-field class=\\\"field-width\\\">\\n      <input matInput type=\\\"email\\\" placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required>\\n      <mat-error *ngIf=\\\"authService.signupForm.controls['email'].errors?.required\\\">Email is mandatory.</mat-error>\\n      <mat-error *ngIf=\\\"authService.signupForm.controls['email'].errors?.pattern\\\">invalid email.</mat-error>\\n    </mat-form-field>\\n    <mat-form-field class=\\\"field-width\\\">\\n      <input matInput type=\\\"password\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\" required matInput>\\n      <mat-error>Password is mandatory</mat-error>\\n    </mat-form-field>\\n    <mat-form-field class=\\\"field-width\\\">\\n      <input matInput type=\\\"password\\\" placeholder=\\\"Confirm password\\\" formControlName=\\\"confirm_password\\\" required matInput>\\n      <mat-error *ngIf=\\\"authService.signupForm.controls['confirm_password'].errors?.required\\\">Confirm password is required.</mat-error>\\n      <mat-error *ngIf=\\\"authService.signupForm.controls['password'].value != authService.signupForm.controls['confirm_password'].value\\\">Password and confirm password is different.</mat-error>\\n    </mat-form-field>\\n    <button mat-raised-button class=\\\"field-width\\\" color=\\\"primary\\\" type=\\\"submit\\\" (click)=\\\"signupUser(authService.signupForm.value)\\\"\\n      [disabled]=\\\"authService.signupForm.invalid\\\">Sign up</button>\\n    <!-- <mat-checkbox class=\\\"remember-me\\\" [(ngModel)]=\\\"checked\\\">Remember me</mat-checkbox> -->\\n   <div class=\\\"link\\\">\\n      <a href=\\\"/login\\\">Login if Already sign up</a>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \".container {\\n  margin: 0 auto;\\n  margin-top: 75px; }\\n\\n.sign-up-form {\\n  margin: 0 auto;\\n  width: 20%;\\n  padding: 20px; }\\n\\n.sign-up-form h2, .sign-up-form h5, .sign-up-form .link {\\n    text-align: center; }\\n\\n.sign-up-form a:link {\\n    font-size: 14px; }\\n\\n.sign-up-form .field-width {\\n    width: 100%; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3RhZG55YTIvcHJvamVjdERldmVsb3BtZW50L1dlYi9XZWJTU1AvRnJvbnRlbmQtVGVzdC1Qcm9qZWN0L2FuZ3VsYXItc3JjL3NyYy9hcHAvY29tcG9uZW50cy9zaWduLXVwL3NpZ24tdXAuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxlQUFjO0VBQ2QsaUJBQWdCLEVBQ2pCOztBQUNEO0VBQ0UsZUFBYztFQUNkLFdBQVU7RUFDVixjQUFhLEVBVWQ7O0FBYkQ7SUFLSSxtQkFBa0IsRUFDbkI7O0FBTkg7SUFRSSxnQkFBZSxFQUNoQjs7QUFUSDtJQVdJLFlBQVcsRUFDWiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvc2lnbi11cC9zaWduLXVwLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lciB7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBtYXJnaW4tdG9wOiA3NXB4O1xufVxuLnNpZ24tdXAtZm9ybSB7XG4gIG1hcmdpbjogMCBhdXRvO1xuICB3aWR0aDogMjAlO1xuICBwYWRkaW5nOiAyMHB4O1xuICAmIGgyLGg1LCAubGluayB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG4gICYgYTpsaW5re1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgfVxuICAmIC5maWVsZC13aWR0aHtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxufVxuIl19 */\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.scss']\n})\nexport class SignUpComponent implements OnInit {\n\n  constructor(\n    private router: Router,\n    public authService: AuthService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  signupUser(user) {\n    this.authService.userSignUp(user).subscribe(res => {\n      if (res['id']) {\n        this.router.navigate(['login']);\n      } else {\n\n      }\n    });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    return true;\n  }\n}\n","// tslint:disable: max-line-length\nimport { Injectable } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Http, Headers } from '@angular/http';\nimport { map } from 'rxjs/operators';\nimport { headersToString } from 'selenium-webdriver/http';\nimport { environment } from '../../environments/environment';\n// import { HEADERS } from '../utils/Constant'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  token: any;\n  username: string;\n\n  regex = /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;\n\n\n  signupForm: FormGroup = new FormGroup({\n    id: new FormControl(null),\n    username: new FormControl('', Validators.required),\n    email: new FormControl('', [Validators.required, Validators.pattern(this.regex)]),\n    password: new FormControl('', [Validators.required]),\n    confirm_password: new FormControl('', [Validators.required]),\n  });\n\n  loginForm: FormGroup = new FormGroup({\n    id: new FormControl(null),\n    email: new FormControl('', [Validators.required, Validators.pattern(this.regex)]),\n    password: new FormControl('', [Validators.required]),\n  });\n\n  /***\n   * urls\n   */\n  LOGIN_URL: string = environment.serverUrl + '/api/Users/login';\n  SIGNUP_URL: string = environment.serverUrl + '/api/Users';\n\n\n  constructor(\n    private http: Http\n  ) { }\n\n\n  getHeaders(): any {\n    // this.loadToken();\n    const headers = new Headers();\n    // headers.append(HEADERS.AUTHENTICATION_TOKEN_KEY, this.token);\n    // headers.append(HEADERS.STAFF_USER_ID_KEY, this.username);\n    headers.append('Content-Type', 'application/json');\n    return headers;\n  }\n\n  // authenticate\n  userLogin(user) {\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return this.http.post(this.LOGIN_URL, user, { headers: headers }).pipe(map(res => res.json()));\n  }\n\n  // sign up\n  userSignUp(user) {\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    return this.http.post(this.SIGNUP_URL, user, { headers: headers }).pipe(map(res => res.json()));\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CategoryService {\n\n  constructor() { }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  serverUrl: 'http://localhost:3000'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}